{"ast":null,"code":"/**\n * marked - a markdown parser\n * Copyright (c) 2011-2022, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\nfunction getDefaults() {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n/**\n * Helpers\n */\n\n\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = /[&<>\"']/g;\nconst escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nconst escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\n\nconst getEscapeReplacement = ch => escapeReplacements[ch];\n\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n/**\n * @param {string} html\n */\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\n    }\n\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\n\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\n\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n\n    try {\n      prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, '').toLowerCase();\n    } catch (e) {\n      return null;\n    }\n\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n/**\n * @param {string} base\n * @param {string} href\n */\n\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = {\n  exec: function noopTest() {}\n};\n\nfunction merge(obj) {\n  let i = 1,\n      target,\n      key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n    let escaped = false,\n        curr = offset;\n\n    while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n\n    if (escaped) {\n      // odd number of slashes means | is escaped\n      // so we leave it alone\n      return '|';\n    } else {\n      // add space before unescaped |\n      return ' |';\n    }\n  }),\n        cells = row.split(/ \\|/);\n  let i = 0; // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n    cells.pop();\n  }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n\n  return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\n\n\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n\n  if (l === 0) {\n    return '';\n  } // Length of suffix matching the invert condition.\n\n\n  let suffLen = 0; // Step left until we fail to match the invert condition.\n\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n\n  const l = str.length;\n  let level = 0,\n      i = 0;\n\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n} // copied from https://stackoverflow.com/a/5450113/806777\n\n/**\n * @param {string} pattern\n * @param {number} count\n */\n\n\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n\n  let result = '';\n\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n\n    count >>= 1;\n    pattern += pattern;\n  }\n\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n  return text.split('\\n').map(node => {\n    const matchIndentInNode = node.match(/^\\s+/);\n\n    if (matchIndentInNode === null) {\n      return node;\n    }\n\n    const [indentInNode] = matchIndentInNode;\n\n    if (indentInNode.length >= indentToCode.length) {\n      return node.slice(indentToCode.length);\n    }\n\n    return node;\n  }).join('\\n');\n}\n/**\n * Tokenizer\n */\n\n\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic ? rtrim(text, '\\n') : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n\n    if (cap) {\n      let text = cap[2].trim(); // remove trailing #s\n\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens: this.lexer.blockTokens(text, []),\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      } // Get next list item\n\n\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`); // Check if current bullet point can start a new List Item\n\n      while (src) {\n        endEarly = false;\n\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) {\n          // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n        line = cap[2].split('\\n', 1)[0];\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) {\n          // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?: [^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`); // Check if following lines should be included in List Item\n\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            line = rawLine; // Re-align to follow commonmark nesting rules\n\n            if (this.options.pedantic) {\n              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            } // End list item if found code fences\n\n\n            if (fencesBeginRegex.test(line)) {\n              break;\n            } // End list item if found start of new heading\n\n\n            if (headingBeginRegex.test(line)) {\n              break;\n            } // End list item if found start of new bullet\n\n\n            if (nextBulletRegex.test(line)) {\n              break;\n            } // Horizontal rule found\n\n\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (line.search(/[^ ]/) >= indent || !line.trim()) {\n              // Dedent if possible\n              itemContents += '\\n' + line.slice(indent);\n            } else if (!blankLine) {\n              // Until blank line, item doesn't need indentation\n              itemContents += '\\n' + line;\n            } else {\n              // Otherwise, improper indentation ends this item\n              break;\n            }\n\n            if (!blankLine && !line.trim()) {\n              // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        } // Check for task list items\n\n\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n        list.raw += raw;\n      } // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n\n\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n      const l = list.items.length; // Item child tokens handled here at end because we needed to have the final item to trim it first\n\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n        const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n        const hasMultipleLineBreaks = spacers.every(t => {\n          const chars = t.raw.split('');\n          let lineBreaks = 0;\n\n          for (const char of chars) {\n            if (char === '\\n') {\n              lineBreaks += 1;\n            }\n\n            if (lineBreaks > 1) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n\n        if (!list.loose && spacers.length && hasMultipleLineBreaks) {\n          // Having a single line break doesn't mean a list is loose. A single line break is terminating the last list item\n          list.loose = true;\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n\n    if (cap) {\n      const token = {\n        type: 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n\n      if (this.options.sanitize) {\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.type = 'paragraph';\n        token.text = text;\n        token.tokens = this.lexer.inline(text);\n      }\n\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n\n    if (cap) {\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href: cap[2] ? cap[2].replace(this.rules.inline._escapes, '$1') : cap[2],\n        title: cap[3] ? cap[3].replace(this.rules.inline._escapes, '$1') : cap[3]\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => {\n          return {\n            text: c\n          };\n        }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n        let l = item.align.length;\n        let i, j, k, row;\n\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => {\n            return {\n              text: c\n            };\n          });\n        } // parse child tokens inside headers and cells\n        // header child tokens\n\n\n        l = item.header.length;\n\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        } // cell child tokens\n\n\n        l = item.rows.length;\n\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize ? 'text' : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!/>$/.test(trimmedUrl)) {\n          return;\n        } // ending angle bracket cannot be escaped\n\n\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n\n      let href = cap[2];\n      let title = '';\n\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !/>$/.test(trimmedUrl)) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n\n    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n\n      if (!link || !link.href) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return; // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar))) {\n      const lLength = match[0].length - 1;\n      let rDelim,\n          rLength,\n          delimTotal = lLength,\n          midDelimTotal = 0;\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0; // Clip maskedSrc to same section of string as src (move to lexer?)\n\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) {\n          // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) {\n          // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n        // Remove extra characters. *a*** -> *a*\n\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        const raw = src.slice(0, lLength + match.index + (match[0].length - rDelim.length) + rLength); // Create `em` if smallest delimiter has odd char count. *a***\n\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        } // Create 'strong' if smallest delimiter has even char count. **a***\n\n\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n\n    if (cap) {\n      let text, href;\n\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [{\n          type: 'text',\n          raw: text,\n          text\n        }]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n\n        text = escape(cap[0]);\n\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [{\n          type: 'text',\n          raw: text,\n          text\n        }]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n\n    if (cap) {\n      let text;\n\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n}\n/**\n * Block-Level Grammar\n */\n\n\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n  + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n  + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n  + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n  + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n  + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n  + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n  + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n  + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n  + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?<?([^\\s>]+)>?(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def).replace('label', block._label).replace('title', block._title).getRegex();\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */).replace('bull', block.bullet).getRegex();\nblock.list = edit(block.list).replace(/bull/g, block.bullet).replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))').replace('def', '\\\\n+(?=' + block.def.source + ')').getRegex();\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i').replace('comment', block._comment).replace('tag', block._tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\nblock.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('|table', '').replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\nblock.blockquote = edit(block.blockquote).replace('paragraph', block.paragraph).getRegex();\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n  + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n  + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n\n});\nblock.gfm.table = edit(block.gfm.table).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n.getRegex();\nblock.gfm.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('table', block.gfm.table) // interrupt paragraphs with table\n.replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)' + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n  + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))').replace('comment', block._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b').getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest,\n  // fences not supported\n  paragraph: edit(block.normal._paragraph).replace('hr', block.hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', block.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()\n});\n/**\n * Inline-Level Grammar\n */\n\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment' + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n  + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n  + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n  + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n  + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\n  // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //          () Skip orphan inside strong                                      () Consume to delim     (1) #***                (2) a***#, a***                             (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^(?:[^_*\\\\]|\\\\.)*?\\_\\_(?:[^_*\\\\]|\\\\.)*?\\*(?:[^_*\\\\]|\\\\.)*?(?=\\_\\_)|(?:[^*\\\\]|\\\\.)+(?=[^*])|[punct_](\\*+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^(?:[^_*\\\\]|\\\\.)*?\\*\\*(?:[^_*\\\\]|\\\\.)*?\\_(?:[^_*\\\\]|\\\\.)*?(?=\\*\\*)|(?:[^_\\\\]|\\\\.)+(?=[^_])|[punct*](\\_+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n}; // list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\n\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex(); // sequences em should skip over [title](link), `code`, <html>\n\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g; // lookbehind is not available on Safari as of version 16\n// inline.escapedEmSt = /(?<=(?:^|[^\\\\)(?:\\\\[^])*)\\\\[*_]/g;\n\ninline.escapedEmSt = /(?:^|[^\\\\])(?:\\\\\\\\)*\\\\[*_]/g;\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim).replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g').replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g').replace(/punct/g, inline._punctuation).getRegex();\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\ninline.tag = edit(inline.tag).replace('comment', inline._comment).replace('attribute', inline._attribute).getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link).replace('label', inline._label).replace('href', inline._href).replace('title', inline._title).getRegex();\ninline.reflink = edit(inline.reflink).replace('label', inline._label).replace('ref', block._label).getRegex();\ninline.nolink = edit(inline.nolink).replace('ref', block._label).getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g').replace('reflink', inline.reflink).replace('nolink', inline.nolink).getRegex();\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', inline._label).getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', inline._label).getRegex()\n});\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\ninline.gfm.url = edit(inline.gfm.url, 'i').replace('email', inline.gfm._extended_email).getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\n});\n/**\n * smartypants text replacement\n * @param {string} text\n */\n\nfunction smartypants(text) {\n  return text // em-dashes\n  .replace(/---/g, '\\u2014') // en-dashes\n  .replace(/--/g, '\\u2013') // opening singles\n  .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018') // closing singles & apostrophes\n  .replace(/'/g, '\\u2019') // opening doubles\n  .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c') // closing doubles\n  .replace(/\"/g, '\\u201d') // ellipses\n  .replace(/\\.{3}/g, '\\u2026');\n}\n/**\n * mangle email addresses\n * @param {string} text\n */\n\n\nfunction mangle(text) {\n  let out = '',\n      i,\n      ch;\n  const l = text.length;\n\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n/**\n * Block Lexer\n */\n\n\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n\n    this.tokenizer.rules = rules;\n  }\n  /**\n   * Expose Rules\n   */\n\n\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n  /**\n   * Static Lex Method\n   */\n\n\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n  /**\n   * Static Lex Inline Method\n   */\n\n\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n  /**\n   * Preprocessing\n   */\n\n\n  lex(src) {\n    src = src.replace(/\\r\\n|\\r/g, '\\n');\n    this.blockTokens(src, this.tokens);\n    let next;\n\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n  /**\n   * Lexing\n   */\n\n\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some(extTokenizer => {\n        if (token = extTokenizer.call({\n          lexer: this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n\n        return false;\n      })) {\n        continue;\n      } // newline\n\n\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      } // code\n\n\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1]; // An indented code block cannot interrupt a paragraph.\n\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      } // fences\n\n\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // heading\n\n\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // hr\n\n\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // blockquote\n\n\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // list\n\n\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // html\n\n\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // def\n\n\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n\n        continue;\n      } // table (gfm)\n\n\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // lheading\n\n\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n\n\n      cutSrc = src;\n\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function (getStartIndex) {\n          tempStart = getStartIndex.call({\n            lexer: this\n          }, tempSrc);\n\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      } // text\n\n\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens = []) {\n    this.inlineQueue.push({\n      src,\n      tokens\n    });\n    return tokens;\n  }\n  /**\n   * Lexing/Compiling\n   */\n\n\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc; // String with links masked to avoid interference with em and strong\n\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar; // Mask out reflinks\n\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    } // Mask out other blocks\n\n\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    } // Mask out escaped em & strong delimiters\n\n\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index + match[0].length - 2) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n      this.tokenizer.rules.inline.escapedEmSt.lastIndex--;\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n\n      keepPrevChar = false; // extensions\n\n      if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some(extTokenizer => {\n        if (token = extTokenizer.call({\n          lexer: this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n\n        return false;\n      })) {\n        continue;\n      } // escape\n\n\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // tag\n\n\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      } // link\n\n\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // reflink, nolink\n\n\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      } // em & strong\n\n\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // code\n\n\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // br\n\n\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // del (gfm)\n\n\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // autolink\n\n\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // url (gfm)\n\n\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      } // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n\n\n      cutSrc = src;\n\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function (getStartIndex) {\n          tempStart = getStartIndex.call({\n            lexer: this\n          }, tempSrc);\n\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n\n        if (token.raw.slice(-1) !== '_') {\n          // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n\n}\n/**\n * Renderer\n */\n\n\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"' + this.options.langPrefix + escape(lang, true) + '\">' + (escaped ? code : escape(code, true)) + '</code></pre>\\n';\n  }\n  /**\n   * @param {string} quote\n   */\n\n\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html) {\n    return html;\n  }\n  /**\n   * @param {string} text\n   * @param {string} level\n   * @param {string} raw\n   * @param {any} slugger\n   */\n\n\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    } // ignore IDs\n\n\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n          startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n  /**\n   * @param {string} text\n   */\n\n\n  listitem(text) {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked) {\n    return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\"' + (this.options.xhtml ? ' /' : '') + '> ';\n  }\n  /**\n   * @param {string} text\n   */\n\n\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n  /**\n   * @param {string} header\n   * @param {string} body\n   */\n\n\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n    return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\n  }\n  /**\n   * @param {string} content\n   */\n\n\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align ? `<${type} align=\"${flags.align}\">` : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n  /**\n   * span level renderer\n   * @param {string} text\n   */\n\n\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n  /**\n   * @param {string} text\n   */\n\n\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n  /**\n   * @param {string} text\n   */\n\n\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n  /**\n   * @param {string} text\n   */\n\n\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n\n\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n\n    if (href === null) {\n      return text;\n    }\n\n    let out = '<a href=\"' + escape(href) + '\"';\n\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n\n    out += '>' + text + '</a>';\n    return out;\n  }\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n\n\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n\n}\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\n\n\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n\n}\n/**\n * Slugger generates header id\n */\n\n\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n  /**\n   * @param {string} value\n   */\n\n\n  serialize(value) {\n    return value.toLowerCase().trim() // remove html tags\n    .replace(/<[!\\/a-z].*?>/ig, '') // remove unwanted chars\n    .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '').replace(/\\s/g, '-');\n  }\n  /**\n   * Finds the next safe (unique) slug to use\n   * @param {string} originalSlug\n   * @param {boolean} isDryRun\n   */\n\n\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n\n    return slug;\n  }\n  /**\n   * Convert string to unique id\n   * @param {object} [options]\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\n   * updating the internal accumulator.\n   */\n\n\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n\n}\n/**\n * Parsing & Compiling\n */\n\n\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n  /**\n   * Static Parse Method\n   */\n\n\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n  /**\n   * Static Parse Inline Method\n   */\n\n\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n  /**\n   * Parse Loop\n   */\n\n\n  parse(tokens, top = true) {\n    let out = '',\n        i,\n        j,\n        k,\n        l2,\n        l3,\n        row,\n        cell,\n        header,\n        body,\n        token,\n        ordered,\n        start,\n        loose,\n        itemBody,\n        item,\n        checked,\n        task,\n        checkbox,\n        ret;\n    const l = tokens.length;\n\n    for (i = 0; i < l; i++) {\n      token = tokens[i]; // Run any renderer extensions\n\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({\n          parser: this\n        }, token);\n\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space':\n          {\n            continue;\n          }\n\n        case 'hr':\n          {\n            out += this.renderer.hr();\n            continue;\n          }\n\n        case 'heading':\n          {\n            out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);\n            continue;\n          }\n\n        case 'code':\n          {\n            out += this.renderer.code(token.text, token.lang, token.escaped);\n            continue;\n          }\n\n        case 'table':\n          {\n            header = ''; // header\n\n            cell = '';\n            l2 = token.header.length;\n\n            for (j = 0; j < l2; j++) {\n              cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), {\n                header: true,\n                align: token.align[j]\n              });\n            }\n\n            header += this.renderer.tablerow(cell);\n            body = '';\n            l2 = token.rows.length;\n\n            for (j = 0; j < l2; j++) {\n              row = token.rows[j];\n              cell = '';\n              l3 = row.length;\n\n              for (k = 0; k < l3; k++) {\n                cell += this.renderer.tablecell(this.parseInline(row[k].tokens), {\n                  header: false,\n                  align: token.align[k]\n                });\n              }\n\n              body += this.renderer.tablerow(cell);\n            }\n\n            out += this.renderer.table(header, body);\n            continue;\n          }\n\n        case 'blockquote':\n          {\n            body = this.parse(token.tokens);\n            out += this.renderer.blockquote(body);\n            continue;\n          }\n\n        case 'list':\n          {\n            ordered = token.ordered;\n            start = token.start;\n            loose = token.loose;\n            l2 = token.items.length;\n            body = '';\n\n            for (j = 0; j < l2; j++) {\n              item = token.items[j];\n              checked = item.checked;\n              task = item.task;\n              itemBody = '';\n\n              if (item.task) {\n                checkbox = this.renderer.checkbox(checked);\n\n                if (loose) {\n                  if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                      item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                    }\n                  } else {\n                    item.tokens.unshift({\n                      type: 'text',\n                      text: checkbox\n                    });\n                  }\n                } else {\n                  itemBody += checkbox;\n                }\n              }\n\n              itemBody += this.parse(item.tokens, loose);\n              body += this.renderer.listitem(itemBody, task, checked);\n            }\n\n            out += this.renderer.list(body, ordered, start);\n            continue;\n          }\n\n        case 'html':\n          {\n            // TODO parse inline content if parameter markdown=1\n            out += this.renderer.html(token.text);\n            continue;\n          }\n\n        case 'paragraph':\n          {\n            out += this.renderer.paragraph(this.parseInline(token.tokens));\n            continue;\n          }\n\n        case 'text':\n          {\n            body = token.tokens ? this.parseInline(token.tokens) : token.text;\n\n            while (i + 1 < l && tokens[i + 1].type === 'text') {\n              token = tokens[++i];\n              body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n            }\n\n            out += top ? this.renderer.paragraph(body) : body;\n            continue;\n          }\n\n        default:\n          {\n            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n\n            if (this.options.silent) {\n              console.error(errMsg);\n              return;\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n\n    return out;\n  }\n  /**\n   * Parse Inline Tokens\n   */\n\n\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n        i,\n        token,\n        ret;\n    const l = tokens.length;\n\n    for (i = 0; i < l; i++) {\n      token = tokens[i]; // Run any renderer extensions\n\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({\n          parser: this\n        }, token);\n\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape':\n          {\n            out += renderer.text(token.text);\n            break;\n          }\n\n        case 'html':\n          {\n            out += renderer.html(token.text);\n            break;\n          }\n\n        case 'link':\n          {\n            out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n            break;\n          }\n\n        case 'image':\n          {\n            out += renderer.image(token.href, token.title, token.text);\n            break;\n          }\n\n        case 'strong':\n          {\n            out += renderer.strong(this.parseInline(token.tokens, renderer));\n            break;\n          }\n\n        case 'em':\n          {\n            out += renderer.em(this.parseInline(token.tokens, renderer));\n            break;\n          }\n\n        case 'codespan':\n          {\n            out += renderer.codespan(token.text);\n            break;\n          }\n\n        case 'br':\n          {\n            out += renderer.br();\n            break;\n          }\n\n        case 'del':\n          {\n            out += renderer.del(this.parseInline(token.tokens, renderer));\n            break;\n          }\n\n        case 'text':\n          {\n            out += renderer.text(token.text);\n            break;\n          }\n\n        default:\n          {\n            const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n\n            if (this.options.silent) {\n              console.error(errMsg);\n              return;\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n\n    return out;\n  }\n\n}\n/**\n * Marked\n */\n\n\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  if (callback) {\n    const highlight = opt.highlight;\n    let tokens;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    const done = function (err) {\n      let out;\n\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens);\n          }\n\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n\n      opt.highlight = highlight;\n      return err ? callback(err) : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n    if (!tokens.length) return done();\n    let pending = 0;\n    marked.walkTokens(tokens, function (token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(() => {\n          highlight(token.text, token.lang, function (err, code) {\n            if (err) {\n              return done(err);\n            }\n\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n\n            pending--;\n\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n\n    if (pending === 0) {\n      done();\n    }\n\n    return;\n  }\n\n  function onError(e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';\n    }\n\n    throw e;\n  }\n\n  try {\n    const tokens = Lexer.lex(src, opt);\n\n    if (opt.walkTokens) {\n      if (opt.async) {\n        return Promise.all(marked.walkTokens(tokens, opt.walkTokens)).then(() => {\n          return Parser.parse(tokens, opt);\n        }).catch(onError);\n      }\n\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n\n    return Parser.parse(tokens, opt);\n  } catch (e) {\n    onError(e);\n  }\n}\n/**\n * Options\n */\n\n\nmarked.options = marked.setOptions = function (opt) {\n  merge(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\nmarked.defaults = defaults;\n/**\n * Use Extension\n */\n\nmarked.use = function (...args) {\n  const opts = merge({}, ...args);\n  const extensions = marked.defaults.extensions || {\n    renderers: {},\n    childTokens: {}\n  };\n  let hasExtensions;\n  args.forEach(pack => {\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      hasExtensions = true;\n      pack.extensions.forEach(ext => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n\n        if (ext.renderer) {\n          // Renderer extensions\n          const prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;\n\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function (...args) {\n              let ret = ext.renderer.apply(this, args);\n\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n\n        if (ext.tokenizer) {\n          // Tokenizer Extensions\n          if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n\n          if (ext.start) {\n            // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n\n        if (ext.childTokens) {\n          // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n    } // ==-- Parse \"overwrite\" extensions --== //\n\n\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop]; // Replace renderer with func to run extension, but fall back if false\n\n        renderer[prop] = (...args) => {\n          let ret = pack.renderer[prop].apply(renderer, args);\n\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n\n          return ret;\n        };\n      }\n\n      opts.renderer = renderer;\n    }\n\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop]; // Replace tokenizer with func to run extension, but fall back if false\n\n        tokenizer[prop] = (...args) => {\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n\n          return ret;\n        };\n      }\n\n      opts.tokenizer = tokenizer;\n    } // ==-- Parse WalkTokens extensions --== //\n\n\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n\n      opts.walkTokens = function (token) {\n        let values = [];\n        values.push(pack.walkTokens.call(this, token));\n\n        if (walkTokens) {\n          values = values.concat(walkTokens.call(this, token));\n        }\n\n        return values;\n      };\n    }\n\n    if (hasExtensions) {\n      opts.extensions = extensions;\n    }\n\n    marked.setOptions(opts);\n  });\n};\n/**\n * Run callback for every token\n */\n\n\nmarked.walkTokens = function (tokens, callback) {\n  let values = [];\n\n  for (const token of tokens) {\n    values = values.concat(callback.call(marked, token));\n\n    switch (token.type) {\n      case 'table':\n        {\n          for (const cell of token.header) {\n            values = values.concat(marked.walkTokens(cell.tokens, callback));\n          }\n\n          for (const row of token.rows) {\n            for (const cell of row) {\n              values = values.concat(marked.walkTokens(cell.tokens, callback));\n            }\n          }\n\n          break;\n        }\n\n      case 'list':\n        {\n          values = values.concat(marked.walkTokens(token.items, callback));\n          break;\n        }\n\n      default:\n        {\n          if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) {\n            // Walk any extensions\n            marked.defaults.extensions.childTokens[token.type].forEach(function (childTokens) {\n              values = values.concat(marked.walkTokens(token[childTokens], callback));\n            });\n          } else if (token.tokens) {\n            values = values.concat(marked.walkTokens(token.tokens, callback));\n          }\n        }\n    }\n  }\n\n  return values;\n};\n/**\n * Parse Inline\n * @param {string} src\n */\n\n\nmarked.parseInline = function (src, opt) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked.parseInline(): input parameter is undefined or null');\n  }\n\n  if (typeof src !== 'string') {\n    throw new Error('marked.parseInline(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  try {\n    const tokens = Lexer.lexInline(src, opt);\n\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n\n    return Parser.parseInline(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';\n    }\n\n    throw e;\n  }\n};\n/**\n * Expose\n */\n\n\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.parse = marked;\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\nexport { Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };","map":{"version":3,"sources":["/Users/zurabmagomadov/projects/zyfra/sdk/zui-sdk-public/node_modules/ngx-markdown/node_modules/marked/lib/marked.esm.js"],"names":["getDefaults","async","baseUrl","breaks","extensions","gfm","headerIds","headerPrefix","highlight","langPrefix","mangle","pedantic","renderer","sanitize","sanitizer","silent","smartypants","tokenizer","walkTokens","xhtml","defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","source","obj","name","val","getRegex","RegExp","nonWordAndColonTest","originIndependentUrl","cleanUrl","base","href","prot","decodeURIComponent","e","indexOf","resolveUrl","encodeURI","baseUrls","justDomain","protocol","domain","rtrim","relativeBase","noopTest","exec","merge","i","target","key","arguments","length","Object","prototype","hasOwnProperty","call","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","trim","shift","pop","splice","push","c","invert","l","suffLen","currChar","slice","findClosingBracket","b","level","checkSanitizeDeprecation","console","warn","repeatString","pattern","result","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","indentInNode","join","Tokenizer","constructor","options","space","src","rules","block","newline","code","codeBlockStyle","fences","lang","inline","_escapes","heading","trimmed","depth","hr","blockquote","blockTokens","list","istask","ischecked","indent","blankLine","endsWithBlankLine","line","nextLine","rawLine","itemContents","endEarly","bull","isordered","ordered","start","loose","items","itemRegex","trimLeft","search","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","task","checked","trimRight","top","spacers","filter","t","hasMultipleLineBreaks","every","chars","lineBreaks","char","pre","def","tag","table","item","header","align","rows","j","k","lheading","paragraph","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","reflink","links","nolink","emStrong","maskedSrc","prevChar","lDelim","nextChar","punctuation","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","rDelimAst","rDelimUnd","lastIndex","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_backpedal","inlineText","_paragraph","_label","_title","bullet","listItemStart","_tag","_comment","normal","reflinkSearch","_punctuation","blockSkip","escapedEmSt","_scheme","_email","_attribute","_href","strong","middle","endAst","endUnd","em","_extended_email","out","charCodeAt","random","toString","Lexer","create","inlineQueue","lex","lexInline","next","leading","tabs","repeat","lastToken","cutSrc","lastParagraphClipped","some","extTokenizer","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","error","Error","keepPrevChar","keys","includes","lastIndexOf","startInline","Renderer","infostring","quote","slugger","id","slug","body","startatt","listitem","checkbox","tablerow","content","tablecell","flags","image","TextRenderer","Slugger","seen","serialize","value","getNextSafeSlug","originalSlug","isDryRun","occurenceAccumulator","dryrun","Parser","textRenderer","parse","parser","parseInline","l2","l3","cell","itemBody","ret","renderers","unshift","marked","callback","done","err","pending","setTimeout","onError","message","Promise","all","then","catch","setOptions","use","args","opts","childTokens","hasExtensions","pack","ext","prevRenderer","apply","prop","prevTokenizer","values","concat"],"mappings":"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","sourcesContent":["/**\n * marked - a markdown parser\n * Copyright (c) 2011-2022, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = /[&<>\"']/g;\nconst escapeTestNoEncode = /[<>\"']|&(?!#?\\w+;)/;\nconst escapeReplaceNoEncode = /[<>\"']|&(?!#?\\w+;)/g;\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\n/**\n * @param {string} html\n */\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\n/**\n * @param {string} base\n * @param {string} href\n */\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction merge(obj) {\n  let i = 1,\n    target,\n    key;\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) { cells.shift(); }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\n// copied from https://stackoverflow.com/a/5450113/806777\n/**\n * @param {string} pattern\n * @param {number} count\n */\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n  let result = '';\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens: this.lexer.blockTokens(text, []),\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0];\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?: [^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            line = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(line)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(line)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(line)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (line.search(/[^ ]/) >= indent || !line.trim()) { // Dedent if possible\n              itemContents += '\\n' + line.slice(indent);\n            } else if (!blankLine) { // Until blank line, item doesn't need indentation\n              itemContents += '\\n' + line;\n            } else { // Otherwise, improper indentation ends this item\n              break;\n            }\n\n            if (!blankLine && !line.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n        const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n        const hasMultipleLineBreaks = spacers.every(t => {\n          const chars = t.raw.split('');\n          let lineBreaks = 0;\n          for (const char of chars) {\n            if (char === '\\n') {\n              lineBreaks += 1;\n            }\n            if (lineBreaks > 1) {\n              return true;\n            }\n          }\n\n          return false;\n        });\n\n        if (!list.loose && spacers.length && hasMultipleLineBreaks) {\n          // Having a single line break doesn't mean a list is loose. A single line break is terminating the last list item\n          list.loose = true;\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.type = 'paragraph';\n        token.text = text;\n        token.tokens = this.lexer.inline(text);\n      }\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href: cap[2] ? cap[2].replace(this.rules.inline._escapes, '$1') : cap[2],\n        title: cap[3] ? cap[3].replace(this.rules.inline._escapes, '$1') : cap[3]\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => { return { text: c }; }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n        || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link || !link.href) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || (nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        const raw = src.slice(0, lLength + match.index + (match[0].length - rDelim.length) + rLength);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + text;\n        } else {\n          href = text;\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?<?([^\\s>]+)>?(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n});\n\nblock.gfm.table = edit(block.gfm.table)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  paragraph: edit(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n});\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //          () Skip orphan inside strong                                      () Consume to delim     (1) #***                (2) a***#, a***                             (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^(?:[^_*\\\\]|\\\\.)*?\\_\\_(?:[^_*\\\\]|\\\\.)*?\\*(?:[^_*\\\\]|\\\\.)*?(?=\\_\\_)|(?:[^*\\\\]|\\\\.)+(?=[^*])|[punct_](\\*+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^(?:[^_*\\\\]|\\\\.)*?\\*\\*(?:[^_*\\\\]|\\\\.)*?\\_(?:[^_*\\\\]|\\\\.)*?(?=\\*\\*)|(?:[^_\\\\]|\\\\.)+(?=[^_])|[punct*](\\_+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n};\n\n// list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\n// lookbehind is not available on Safari as of version 16\n// inline.escapedEmSt = /(?<=(?:^|[^\\\\)(?:\\\\[^])*)\\\\[*_]/g;\ninline.escapedEmSt = /(?:^|[^\\\\])(?:\\\\\\\\)*\\\\[*_]/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim)\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n});\n\n/**\n * smartypants text replacement\n * @param {string} text\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n * @param {string} text\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped em & strong delimiters\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index + match[0].length - 2) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n      this.tokenizer.rules.inline.escapedEmSt.lastIndex--;\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang, true)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  /**\n   * @param {string} quote\n   */\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html) {\n    return html;\n  }\n\n  /**\n   * @param {string} text\n   * @param {string} level\n   * @param {string} raw\n   * @param {any} slugger\n   */\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    }\n\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  /**\n   * @param {string} text\n   */\n  listitem(text) {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  /**\n   * @param {string} text\n   */\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n\n  /**\n   * @param {string} header\n   * @param {string} body\n   */\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  /**\n   * @param {string} content\n   */\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? `<${type} align=\"${flags.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   * @param {string} text\n   */\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  /**\n   * @param {string} text\n   */\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + escape(href) + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  /**\n   * @param {string} value\n   */\n  serialize(value) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   * @param {string} originalSlug\n   * @param {boolean} isDryRun\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} [options]\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\n   * updating the internal accumulator.\n   */\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          // TODO parse inline content if parameter markdown=1\n          out += this.renderer.html(token.text);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  if (callback) {\n    const highlight = opt.highlight;\n    let tokens;\n\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n\n    const done = function(err) {\n      let out;\n\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens);\n          }\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n\n      opt.highlight = highlight;\n\n      return err\n        ? callback(err)\n        : callback(null, out);\n    };\n\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n\n    delete opt.highlight;\n\n    if (!tokens.length) return done();\n\n    let pending = 0;\n    marked.walkTokens(tokens, function(token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(() => {\n          highlight(token.text, token.lang, function(err, code) {\n            if (err) {\n              return done(err);\n            }\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n\n            pending--;\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n\n    if (pending === 0) {\n      done();\n    }\n\n    return;\n  }\n\n  function onError(e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n\n  try {\n    const tokens = Lexer.lex(src, opt);\n    if (opt.walkTokens) {\n      if (opt.async) {\n        return Promise.all(marked.walkTokens(tokens, opt.walkTokens))\n          .then(() => {\n            return Parser.parse(tokens, opt);\n          })\n          .catch(onError);\n      }\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parse(tokens, opt);\n  } catch (e) {\n    onError(e);\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  merge(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\n\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args) {\n  const opts = merge({}, ...args);\n  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };\n  let hasExtensions;\n\n  args.forEach((pack) => {\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      hasExtensions = true;\n      pack.extensions.forEach((ext) => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n        if (ext.renderer) { // Renderer extensions\n          const prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function(...args) {\n              let ret = ext.renderer.apply(this, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n        if (ext.tokenizer) { // Tokenizer Extensions\n          if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n          if (ext.start) { // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n        if (ext.childTokens) { // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop];\n        // Replace renderer with func to run extension, but fall back if false\n        renderer[prop] = (...args) => {\n          let ret = pack.renderer[prop].apply(renderer, args);\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n          return ret;\n        };\n      }\n      opts.renderer = renderer;\n    }\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop];\n        // Replace tokenizer with func to run extension, but fall back if false\n        tokenizer[prop] = (...args) => {\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n          return ret;\n        };\n      }\n      opts.tokenizer = tokenizer;\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function(token) {\n        let values = [];\n        values.push(pack.walkTokens.call(this, token));\n        if (walkTokens) {\n          values = values.concat(walkTokens.call(this, token));\n        }\n        return values;\n      };\n    }\n\n    if (hasExtensions) {\n      opts.extensions = extensions;\n    }\n\n    marked.setOptions(opts);\n  });\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens, callback) {\n  let values = [];\n  for (const token of tokens) {\n    values = values.concat(callback.call(marked, token));\n    switch (token.type) {\n      case 'table': {\n        for (const cell of token.header) {\n          values = values.concat(marked.walkTokens(cell.tokens, callback));\n        }\n        for (const row of token.rows) {\n          for (const cell of row) {\n            values = values.concat(marked.walkTokens(cell.tokens, callback));\n          }\n        }\n        break;\n      }\n      case 'list': {\n        values = values.concat(marked.walkTokens(token.items, callback));\n        break;\n      }\n      default: {\n        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {\n            values = values.concat(marked.walkTokens(token[childTokens], callback));\n          });\n        } else if (token.tokens) {\n          values = values.concat(marked.walkTokens(token.tokens, callback));\n        }\n      }\n    }\n  }\n  return values;\n};\n\n/**\n * Parse Inline\n * @param {string} src\n */\nmarked.parseInline = function(src, opt) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked.parseInline(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked.parseInline(): input parameter is of type '\n      + Object.prototype.toString.call(src) + ', string expected');\n  }\n\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n\n  try {\n    const tokens = Lexer.lexInline(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parseInline(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n    }\n    throw e;\n  }\n};\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.parse = marked;\n\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\n\nexport { Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n"]},"metadata":{},"sourceType":"module"}